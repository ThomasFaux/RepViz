colnames(average_cov) <- c("position",sprintf("condition%02d", seq(1,length(coverages))))
average_cov <- melt(average_cov, id="position")
BAMplot <- ggplot(data=average_cov,aes(x=position, y=value, colour=variable, group=variable)) + geom_line(alpha=0.6,size = 2.5) + ylim(0,max(unlist(coverages)))
return(BAMplot)
}
doPlotBAM <- function(region,coverages){
BAMplots <- list()
for(i in 1:length(coverages)){
coverage <- cbind(as.data.frame(coverages[[i]]),region[2]:region[3])
colnames(coverage) <- c(sprintf("rep%02d", seq(1,length(coverages[[i]]))),"position")
coverage <- melt(coverage, id="position")
BAMplots[[i]] <- ggplot(data=coverage,aes(x=position, y=value, colour=variable, group=variable)) + geom_line(alpha=0.6) + ylim(0,max(unlist(coverages)))
}
return(BAMplots)
}
makeFinalPlot <- function(Bamplots = NULL, BEDplots = NULL, genePlot =NULL,region,heights,trackNames){
names(BAMplots) <- trackNames
tracks(Tumor = BAMplots[["Tumor"]],Normal=BAMplots[["Normal"]],Region=genePlot,heights = heights,xlim=c(as.numeric(region[[2]]), as.numeric(region[[3]])))
}
##########################test
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
# Load BSgenome
library(BSgenome.Hsapiens.UCSC.hg19)
genome <- BSgenome.Hsapiens.UCSC.hg19
ROTS <- read.table("../Clean_Results/GA_H3K27Ac/unpooled_paired/results/myresults_RWV179.50212631931_run.bed",sep=" ",header=T)
DB_deseq2 <- read.table("../Clean_Results/GA_H3K27Ac/Diffbind/DBsitesH3K36me3_deseq2.bed",sep="\t",header=F)
DR  <- read.table("../Clean_Results/GA_H3K27Ac/Software_comparison/diffReps_simulated_nb.txt",sep="\t",header=F)
PePr <- read.table("../Clean_Results/GA_H3K27Ac/PePr/results/PePr_H3K27ac_peaks.bed",sep="\t",header=F)
THOR <- read.table("../Clean_Results/GA_H3K27Ac/THOR/THOR-synthetic-diffpeaks.narrowPeak",sep="\t",header=F)
#################################################################################
##
##
##        Main
##
##
#################################################################################
## Genome
genome = BSgenome.Hsapiens.UCSC.hg19
si = seqinfo(genome)
si = si[ paste0('chr', c(1:22, 'X', 'Y','M'))]
## Change the format of the files to be
## able to convert them to GRanges
ROTS <- ROTS[,c(2:4,12,11)]
DB_deseq2 <- DB_deseq2[,c(1:3,6,5)]
DB_deseq2$V5 <- 10^(((-1 *DB_deseq2$V5))/10)
DR <- DR[,c(1:3,12,14)]
PePr <- cbind(PePr[,1:3],c(rep(-1,3778),rep(1,807)),PePr[,9])
THOR$V9 <- 10^(-THOR$V8)
THOR$V10 <- sapply(X = THOR$V9,FUN = p.adjust,method = "BH",n = length(THOR$V9))
THOR <- THOR[which(THOR$V10 < 0.05),]
View(THOR)
write.table(x = THOR,file = "thor0_05.bed",quote = FALSE,col.names = FALSE,row.names = FALSE)
ROTS <- read.table("../Clean_Results/GA_H3K27Ac/unpooled_paired/results/myresults_RWV179.50212631931_run.bed",sep=" ",header=T)
DB_deseq2 <- read.table("../Clean_Results/GA_H3K27Ac/Diffbind/DBsitesH3K36me3_deseq2.bed",sep="\t",header=F)
DR  <- read.table("../Clean_Results/GA_H3K27Ac/Software_comparison/diffReps_simulated_nb.txt",sep="\t",header=F)
PePr <- read.table("../Clean_Results/GA_H3K27Ac/PePr/results/PePr_H3K27ac_peaks.bed",sep="\t",header=F)
THOR <- read.table("../Clean_Results/GA_H3K27Ac/THOR/THOR-synthetic-diffpeaks.narrowPeak",sep="\t",header=F)
#################################################################################
##
##
##        Main
##
##
#################################################################################
## Genome
genome = BSgenome.Hsapiens.UCSC.hg19
si = seqinfo(genome)
si = si[ paste0('chr', c(1:22, 'X', 'Y','M'))]
## Change the format of the files to be
## able to convert them to GRanges
ROTS <- ROTS[,c(2:4,12,11)]
DB_deseq2 <- DB_deseq2[,c(1:3,6,5)]
DB_deseq2$V5 <- 10^(((-1 *DB_deseq2$V5))/10)
DR <- DR[,c(1:3,12,14)]
PePr <- cbind(PePr[,1:3],c(rep(-1,3778),rep(1,807)),PePr[,9])
THOR$V9 <- 10^(-THOR$V8)
THOR$V10 <- sapply(X = THOR$V9,FUN = p.adjust,method = "BH",n = length(THOR$V9))
THOR <- THOR[which(THOR$V10 < 0.05),]
THOR <- THOR[,c(1:3,6,10)]
THOR$V6 <- as.character(THOR$V6)
THOR[which(THOR[,4] == "+"),4] <- 1
THOR[which(THOR[,4] == "-"),4] <- -1
THOR$V6 <- as.numeric(THOR$V6)
## Rename the columns of the different data frames to be
## able to convert them to GRanges
colnames(ROTS) <- c("space","start","end","fc","FDR")
colnames(DB_deseq2) <- c("space","start","end","fc","FDR")
colnames(DR) <- c("space","start","end","fc","FDR")
colnames(PePr) <- c("space","start","end","fc","FDR")
colnames(THOR) <- c("space","start","end","fc","FDR")
## Conversion of the Data frames to GRanges objects
ROTS <- toGRanges(ROTS)
DB_deseq2 <- toGRanges(DB_deseq2)
DR <- toGRanges(DR)
PePr <- toGRanges(PePr)
THOR <- toGRanges(THOR)
## This function is determining uniques and overlaping peaks
## for each Software
ol <- findOverlapsOfPeaks(ROTS,DB_deseq2,DR,PePr,THOR)
## plot the venn diagram of the overlap
makeVennDiagram(ol)
uniqueROTS <- ol$uniquePeaks[10704:14290]
peaksROTS <- cbind(names(uniqueROTS),data.frame(uniqueROTS))
head(peaksROTS[order(peaksROTS$fc,decreasing = TRUE),],5)
head(peaksROTS[order(peaksROTS$fc,decreasing = FALSE),],5)
head(peaksROTS[order(peaksROTS$fc,decreasing = FALSE),],6)
region <- GRanges("chr17:77906434-77906736")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_region_1_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
ROTS <- read.table("../Clean_Results/GA_H3K27Ac/unpooled_paired/results/myresults_RWV179.50212631931_run.bed",sep=" ",header=T)
DB_deseq2 <- read.table("../Clean_Results/GA_H3K27Ac/Diffbind/DBsitesH3K36me3_deseq2.bed",sep="\t",header=F)
DR  <- read.table("../Clean_Results/GA_H3K27Ac/Software_comparison/diffReps_simulated_nb.txt",sep="\t",header=F)
PePr <- read.table("../Clean_Results/GA_H3K27Ac/PePr/results/PePr_H3K27ac_peaks.bed",sep="\t",header=F)
THOR <- read.table("../Clean_Results/GA_H3K27Ac/THOR/THOR-synthetic-diffpeaks.narrowPeak",sep="\t",header=F)
#################################################################################
##
##
##        Main
##
##
#################################################################################
## Genome
genome = BSgenome.Hsapiens.UCSC.hg19
si = seqinfo(genome)
si = si[ paste0('chr', c(1:22, 'X', 'Y','M'))]
## Change the format of the files to be
## able to convert them to GRanges
ROTS <- ROTS[,c(2:4,12,11)]
DB_deseq2 <- DB_deseq2[,c(1:3,6,5)]
DB_deseq2$V5 <- 10^(((-1 *DB_deseq2$V5))/10)
DR <- DR[,c(1:3,12,14)]
PePr <- cbind(PePr[,1:3],c(rep(-1,3778),rep(1,807)),PePr[,9])
THOR$V9 <- 10^(-THOR$V8)
THOR$V10 <- sapply(X = THOR$V9,FUN = p.adjust,method = "BH",n = length(THOR$V9))
THOR <- THOR[which(THOR$V10 < 0.05),]
write.table(x = THOR,file = "thor0_05.bed",quote = FALSE,col.names = FALSE,row.names = FALSE,sep = "\t")
ROTS <- read.table("../Clean_Results/GA_H3K27Ac/unpooled_paired/results/myresults_RWV179.50212631931_run.bed",sep=" ",header=T)
DB_deseq2 <- read.table("../Clean_Results/GA_H3K27Ac/Diffbind/DBsitesH3K36me3_deseq2.bed",sep="\t",header=F)
DR  <- read.table("../Clean_Results/GA_H3K27Ac/Software_comparison/diffReps_simulated_nb.txt",sep="\t",header=F)
PePr <- read.table("../Clean_Results/GA_H3K27Ac/PePr/results/PePr_H3K27ac_peaks.bed",sep="\t",header=F)
THOR <- read.table("../Clean_Results/GA_H3K27Ac/THOR/THOR-synthetic-diffpeaks.narrowPeak",sep="\t",header=F)
#################################################################################
##
##
##        Main
##
##
#################################################################################
## Genome
genome = BSgenome.Hsapiens.UCSC.hg19
si = seqinfo(genome)
si = si[ paste0('chr', c(1:22, 'X', 'Y','M'))]
## Change the format of the files to be
## able to convert them to GRanges
ROTS <- ROTS[,c(2:4,12,11)]
DB_deseq2 <- DB_deseq2[,c(1:3,6,5)]
DB_deseq2$V5 <- 10^(((-1 *DB_deseq2$V5))/10)
DR <- DR[,c(1:3,12,14)]
PePr <- cbind(PePr[,1:3],c(rep(-1,3778),rep(1,807)),PePr[,9])
THOR$V9 <- 10^(-THOR$V8)
THOR$V10 <- sapply(X = THOR$V9,FUN = p.adjust,method = "BH",n = length(THOR$V9))
THOR <- THOR[which(THOR$V10 < 0.05),]
THOR <- THOR[,c(1:3,6,10)]
THOR$V6 <- as.character(THOR$V6)
THOR[which(THOR[,4] == "+"),4] <- 1
THOR[which(THOR[,4] == "-"),4] <- -1
THOR$V6 <- as.numeric(THOR$V6)
## Rename the columns of the different data frames to be
## able to convert them to GRanges
colnames(ROTS) <- c("space","start","end","fc","FDR")
colnames(DB_deseq2) <- c("space","start","end","fc","FDR")
colnames(DR) <- c("space","start","end","fc","FDR")
colnames(PePr) <- c("space","start","end","fc","FDR")
colnames(THOR) <- c("space","start","end","fc","FDR")
## Conversion of the Data frames to GRanges objects
ROTS <- toGRanges(ROTS)
DB_deseq2 <- toGRanges(DB_deseq2)
DR <- toGRanges(DR)
PePr <- toGRanges(PePr)
THOR <- toGRanges(THOR)
## This function is determining uniques and overlaping peaks
## for each Software
ol <- findOverlapsOfPeaks(ROTS,DB_deseq2,DR,PePr,THOR)
## plot the venn diagram of the overlap
makeVennDiagram(ol)
uniqueROTS <- ol$uniquePeaks[10705:14290]
peaksROTS <- cbind(names(uniqueROTS),data.frame(uniqueROTS))
head(peaksROTS[order(peaksROTS$fc,decreasing = FALSE),],6)
region <- GRanges("chr17:77906434-77906736")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_region_1_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr10:34496210-34496560")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_region_1_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
peaksROTS
head(peaksROTS[order(peaksROTS$FDR,decreasing = FALSE),],5)
region <- GRanges("chr3:71176931-71180560")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_region_1_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr3:71176931-71180560")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =TRUE,
tr_label = 2)
pdf("BestFDR_ROTS_region_1_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr2:157292954-157294313")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =TRUE,
tr_label = 2)
pdf("BestFDR_ROTS_regionGPD2_2_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr2:157292954-157294313")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_regionGPD2_2_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr7:104622409-104625987")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =TRUE,
tr_label = 2)
pdf("BestFDR_ROTS_regionNR_039981_3_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr7:104622409-104625987")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_regionNR_039981_3_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr7:130599081-130601551")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_region_4_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr15:40636895-40641670")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("BestFDR_ROTS_region_5_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
commonTHOR <- ol$overlappingPeaks$`ROTS///THOR`
colnames(commonTHOR) <- c("peaks1","seqnames1","start1","end1","width1","strand1","fc1","FDR1","peaks2","seqnames2","start2","end2","width2","strand2","fc2","FDR2","overlapFeature","shortestDistance")
commonTHOR[order(commonTHOR[,16]),]
head(commonTHOR,7)
commonTHOR <- ol$overlappingPeaks$`ROTS///THOR`
colnames(commonTHOR) <- c("peaks1","seqnames1","start1","end1","width1","strand1","fc1","FDR1","peaks2","seqnames2","start2","end2","width2","strand2","fc2","FDR2","overlapFeature","shortestDistance")
commonTHOR[order(commonTHOR$FDR2),]
commonTHOR[order(commonTHOR$FDR1),]
region <- GRanges("chr7:73240450-73248000")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr7:73240450-73248000_common_ROTS_0.02_THOR_0.00_region_5_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr8:128806850-128812100")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr8:128806850-128812100_common_ROTS_0.02_THOR_0.00_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr8:128745700-128753100")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr8:128745700-128753100_common_ROTS_0.01_THOR_0.00_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr9:124045443-124052763")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr9:124045443-124052763_common_ROTS_0.00_THOR_0.00_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr15:59566265-59569817")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr15:59566265-59569817_common_ROTS_0.00_THOR_0.00_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
uniqueROTS <- ol$uniquePeaks[10705:14290]
peaksROTS <- cbind(names(uniqueROTS),data.frame(uniqueROTS))
head(peaksROTS[order(peaksROTS$FDR,decreasing = TRUE),],5)
plot(uniqueROTS$FDR,(end(uniqueROTS)-start(uniqueROTS)))
test uniquesROTS
uniquesROTS
uniqueROTS
region <- GRanges("chr17:27916918-27920014")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr17:27916918-27920014_UNIQUE_ROTS_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr19:54782731-54783081")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr19:54782731-54783081_UNIQUE_ROTS_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr11:68064332-68065288")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr11:68064332-68065288_UNIQUE_ROTS_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr8:59508545-59509728")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr8:59508545-59509728_UNIQUE_ROTS_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
uniqueTHOR <- ol$uniquePeaks[1:6730]
peaksTHOR <- cbind(names(uniqueTHOR),data.frame(uniqueTHOR))
head(peaksTHOR[order(peaksTHOR$FDR,decreasing = TRUE),],5)
plot(uniqueTHOR$FDR,(end(uniqueTHOR)-start(uniqueTHOR)))
plot(uniqueROTS$FDR,(end(uniqueROTS)-start(uniqueROTS)),ylim=c(0,20000))
plot(uniqueTHOR$FDR,(end(uniqueTHOR)-start(uniqueTHOR)),ylim=c(0,20000))
region <- GRanges("chr1:172955900-172956400")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr1:172955900-172956400_UNIQUE_THOR_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr19:42591550-42592700")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr19:42591550-42592700_UNIQUE_THOR_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr17:25968450-25969200")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr17:25968450-25969200_UNIQUE_THOR_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
region <- GRanges("chr3:90012350-90012700")
myplot <- plotRegion(region = region,
txdb = txdb,
genome = genome,
BAM = "BAM_input.csv",
BED = "BED_input.csv",
geneTrack =FALSE,
tr_label = 2)
pdf("chr3:90012350-90012700_UNIQUE_THOR_HIGHFDR_H3K27AC.pdf", width = 8, height = 8)
grid.arrange(myplot)
dev.off()
plot(uniqueROTS$FDR,(end(uniqueROTS)-start(uniqueROTS)),ylim=c(0,20000))
plot(uniqueROTS$FDR,(end(uniqueROTS)-start(uniqueROTS)),ylim=c(0,20000))
plot(uniqueROTS$FDR,(end(uniqueROTS)-start(uniqueROTS)),ylim=c(0,20000))
plot(uniqueTHOR$FDR,(end(uniqueTHOR)-start(uniqueTHOR)),ylim=c(0,20000))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("gespeR", version = "3.8")
BiocManager::install("ChIPseeker")
devtools::document()
devtools::check("RepViz")
devtools::document()
setwd("~/Desktop/RepViz")
devtools::document()
devtools::check("RepViz")
setwd("~/Desktop")
devtools::check("RepViz")
devtools::check("RepViz")
devtools::check("RepViz")
devtools::check("RepViz")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
setwd("~/Desktop/RepViz")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
devtools::build(".",binary = TRUE)
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
devtools::build(".",binary = TRUE)
install.packages("../RepViz_0.1.12.tgz",repos = NULL)
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package RepViz --output=./RepViz-manual.pdf --force --no-clean --internals")
